PERSONAL BUDGET TRACKER
Description: Develop a console-based budget tracker that allows users to manage their expenses and income.

Features:

Expense and Income Entry: Allow users to input expenses and income with categories and amounts.
Budget Calculation: Calculate the remaining budget after deducting expenses from income.
Expense Analysis: Provide insights by categorizing expenses and displaying spending trends.
Data Persistence: Store transactions in a file/database for tracking over time.

CODE :-

import os
import json
from datetime import datetime

# Function to load transactions from a JSON file
def load_transactions():
    if os.path.exists("transactions.json"):
        with open("transactions.json", "r") as file:
            transactions = json.load(file)
        return transactions
    else:
        return {"transactions": []}

# Function to save transactions to a JSON file
def save_transactions(transactions):
    with open("transactions.json", "w") as file:
        json.dump(transactions, file, indent=4)

# Function to add an expense
def add_expense(transactions):
    category = input("Enter expense category: ")
    amount = float(input("Enter expense amount: "))
    date = datetime.now().strftime("%Y-%m-%d")

    new_expense = {
        "type": "expense",
        "category": category,
        "amount": amount,
        "date": date
    }
    transactions["transactions"].append(new_expense)
    save_transactions(transactions)
    print("Expense added successfully!")

# Function to add income
def add_income(transactions):
    category = input("Enter income category: ")
    amount = float(input("Enter income amount: "))
    date = datetime.now().strftime("%Y-%m-%d")

    new_income = {
        "type": "income",
        "category": category,
        "amount": amount,
        "date": date
    }
    transactions["transactions"].append(new_income)
    save_transactions(transactions)
    print("Income added successfully!")

# Function to remove a transaction
def remove_transaction(transactions):
    print_transactions(transactions)
    transaction_index = int(input("Enter the index of the transaction to remove: "))
    del transactions["transactions"][transaction_index]
    save_transactions(transactions)
    print("Transaction removed successfully!")

# Function to print all transactions
def print_transactions(transactions):
    print("\nTRANSACTIONS:")
    for index, transaction in enumerate(transactions["transactions"]):
        print(f"{index}. [{transaction['type'].capitalize()}] {transaction['category']} - Amount: ${transaction['amount']} - Date: {transaction['date']}")

# Function to calculate total income
def calculate_income(transactions):
    total_income = sum(transaction["amount"] for transaction in transactions["transactions"] if transaction["type"] == "income")
    return total_income

# Function to calculate total expenses
def calculate_expenses(transactions):
    total_expenses = sum(transaction["amount"] for transaction in transactions["transactions"] if transaction["type"] == "expense")
    return total_expenses

# Function to calculate remaining budget
def calculate_budget(transactions):
    total_income = calculate_income(transactions)
    total_expenses = calculate_expenses(transactions)
    remaining_budget = total_income - total_expenses
    return remaining_budget

# Function to analyze expenses by category
def analyze_expenses(transactions):
    expense_categories = {}
    for transaction in transactions["transactions"]:
        if transaction["type"] == "expense":
            category = transaction["category"]
            amount = transaction["amount"]
            if category in expense_categories:
                expense_categories[category] += amount
            else:
                expense_categories[category] = amount
    if expense_categories:
        print("\nEXPENSE ANALYSIS:")
        for category, amount in expense_categories.items():
            print(f"{category}: ${amount}")
    else:
        print("\nNo expense data available.")

# Main function
def main():
    transactions = load_transactions()
    while True:
        print("\n===== BUDGET TRACKER =====\n")
        print("1. Add Expense")
        print("2. Add Income")
        print("3. Remove Transaction")
        print("4. View Transactions")
        print("5. View Budget")
        print("6. Analyze Expenses")
        print("7. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            add_expense(transactions)
        elif choice == "2":
            add_income(transactions)
        elif choice == "3":
            remove_transaction(transactions)
        elif choice == "4":
            print_transactions(transactions)
        elif choice == "5":
            remaining_budget = calculate_budget(transactions)
            print(f"\nREMAINING BUDGET: ${remaining_budget}")
        elif choice == "6":
            analyze_expenses(transactions)
        elif choice == "7":
            print("Exiting...")
            break
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()
